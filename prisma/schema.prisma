generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["rhel-openssl-3.0.x", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid                String    @id
  username            String
  firstName           String
  lastName            String
  email               String
  phoneNumber         String
  signupDate          DateTime
  mailOptIn           Boolean
  defaultHouseholdId  String?
  createdAt           DateTime
  updatedAt           DateTime
  confirmedEmail      Boolean
  subscriptionEndDate DateTime?
  subscriptionId      String? // In-app purchase subscription ID
  subscriptionStatus  String // Subscription status (e.g., 'active', 'trial', 'inactive')
  purchaseToken       String? // Purchase token for verification (Android)
  receiptData         String? // Receipt data for verification (iOS)

  households       Household[]        @relation("UserHouseholds")
  householdMembers HouseholdMembers[]
  invited          Invitations[]
  audits           AuditTrail[]
  securityLogs     SecurityLog[]
  notifications    Notification[]
  tokens           Token[]
}

model Household {
  householdId                   String   @id
  householdName                 String
  creationDate                  DateTime
  customHouseholdNameSuchAsCrew String
  createdAt                     DateTime
  updatedAt                     DateTime
  account                       String
  setupComplete                 Boolean
  activeSubscription            Boolean

  members        HouseholdMembers[]
  incomes        Incomes[]
  ledger         Ledger[]
  bills          Bill[]
  preferences    Preferences[]
  invitations    Invitations[]
  paymentSources PaymentSource[]

  users User[] @relation("UserHouseholds")
}

model HouseholdMembers {
  id          String   @id @default(uuid())
  householdId String
  memberUuid  String
  role        String
  joinedDate  DateTime
  createdAt   DateTime
  updatedAt   DateTime

  household Household @relation(fields: [householdId], references: [householdId])
  user      User      @relation(fields: [memberUuid], references: [uuid])
}

model Incomes {
  incomeId    String   @id
  householdId String
  name        String
  amount      Int
  frequency   String
  firstPayDay DateTime
  createdAt   DateTime
  updatedAt   DateTime

  household Household @relation(fields: [householdId], references: [householdId])
  ledger    Ledger[]
}

model Ledger {
  ledgerId        String   @id
  householdId     String
  paymentSourceId String?
  amount          Float
  transactionType String
  transactionDate DateTime
  category        String
  description     String
  status          Boolean
  createdAt       DateTime
  updatedAt       DateTime
  updatedBy       String
  billId          String?
  incomeId        String?
  runningTotal    Float
  interestRate    Float?
  cashBack        Float?

  household    Household     @relation(fields: [householdId], references: [householdId])
  bill         Bill?         @relation(fields: [billId], references: [billId])
  income       Incomes?      @relation(fields: [incomeId], references: [incomeId])
  attachments  Attachments[]
  transactions Transaction[]
}

model Bill {
  billId                     String   @id
  householdId                String
  category                   String
  billName                   String
  amount                     Float
  dayOfMonth                 Int
  frequency                  String
  isDebt                     Boolean
  interestRate               Float?
  cashBack                   Float?
  description                String
  status                     String
  url                        String
  username                   String
  password                   String
  createdAt                  DateTime
  updatedAt                  DateTime
  notificationNotificationId String?  @unique

  household    Household     @relation(fields: [householdId], references: [householdId])
  ledger       Ledger[]
  notification Notification? @relation(fields: [notificationNotificationId], references: [notificationId])
}

model Preferences {
  preferenceId    String   @id
  householdId     String
  preferenceType  String
  preferenceValue String
  createdAt       DateTime
  updatedAt       DateTime

  household Household @relation(fields: [householdId], references: [householdId])
}

model Invitations {
  invitationId     String   @id
  householdId      String
  invitedUserUuid  String
  invitationStatus String
  sentDate         DateTime
  createdAt        DateTime
  updatedAt        DateTime

  household   Household @relation(fields: [householdId], references: [householdId])
  invitedUser User      @relation(fields: [invitedUserUuid], references: [uuid])
}

model AuditTrail {
  auditId       String   @id
  tableAffected String
  actionType    String
  oldValue      String
  newValue      String
  changedBy     String
  changeDate    DateTime
  timestamp     DateTime
  device        String
  ipAddress     String
  deviceType    String
  ssoEnabled    String

  user User @relation(fields: [changedBy], references: [uuid])
}

model Attachments {
  attachmentId String   @id
  ledgerId     String
  fileType     String
  filePath     String
  uploadDate   DateTime
  createdAt    DateTime
  updatedAt    DateTime

  ledger Ledger @relation(fields: [ledgerId], references: [ledgerId])
}

model SecurityLog {
  logId           String   @id
  userUuid        String
  loginTime       DateTime
  ipAddress       String
  deviceDetails   String
  locationDetails String
  actionType      String
  createdAt       DateTime

  user User @relation(fields: [userUuid], references: [uuid])
}

model Notification {
  notificationId String   @id
  userUuid       String
  billId         String?  @unique
  title          String
  message        String
  read           Boolean
  createdAt      DateTime
  updatedAt      DateTime

  user User  @relation(fields: [userUuid], references: [uuid])
  bill Bill?
}

model Token {
  tokenId      String   @id @default(uuid())
  userUuid     String
  accessToken  String
  refreshToken String
  idToken      String
  issuedAt     DateTime
  expiresIn    Int
  token        String
  type         String // Ensure this field exists
  User         User     @relation(fields: [userUuid], references: [uuid])
}

model PaymentSource {
  sourceId    String   @id @default(uuid())
  householdId String
  sourceName  String
  sourceType  String // e.g., 'credit_card', 'bank_account'
  details     String // Additional details like account number, last 4 digits of a card, etc.
  createdAt   DateTime
  updatedAt   DateTime

  household    Household     @relation(fields: [householdId], references: [householdId])
  transactions Transaction[]
}

model Transaction {
  transactionId   String   @id @default(uuid())
  ledgerId        String
  sourceId        String
  amount          Float
  transactionDate DateTime
  description     String
  createdAt       DateTime
  updatedAt       DateTime

  ledger Ledger        @relation(fields: [ledgerId], references: [ledgerId])
  source PaymentSource @relation(fields: [sourceId], references: [sourceId])
}
