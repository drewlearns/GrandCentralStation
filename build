#!/bin/bash
set -vex
set -o pipefail


# Define the source and deploy directories
SRC_DIR="./src"
DEPLOY_DIR="./deploy"

# Clean and prepare the deploy directory
rm -rf $DEPLOY_DIR
mkdir -p $DEPLOY_DIR
# Copy the schema.prisma and the .so.node file to the deploy directory
cp "prisma/schema.prisma" "$DEPLOY_DIR"
cp "node_modules/.prisma/client/libquery_engine-rhel-openssl-3.0.x.so.node" "$DEPLOY_DIR"

# Loop through each .js file in the src directory
for entry in $(find "$SRC_DIR" -name "*.js"); do
  # Get the base name of the file without the extension
  base_name=$(basename "$entry" .js)

  # Run Webpack to bundle this file and log the process
  echo "Bundling $entry using Webpack..."
  webpack --config webpack.config.js --env entry=$base_name.js

  # Check if the expected JS file is created
  if [ ! -f "$DEPLOY_DIR/$base_name.js" ]; then
    echo "Bundled file for $base_name not found, skipping."
    continue
  fi

  # Move bundled JS, schema.prisma, and .so.node to a temporary directory to zip
  mkdir -p "$DEPLOY_DIR/tmp"
  mv "$DEPLOY_DIR/$base_name.js" "$DEPLOY_DIR/tmp"
  cp "$DEPLOY_DIR/schema.prisma" "$DEPLOY_DIR/tmp"
  cp "$DEPLOY_DIR/libquery_engine-rhel-openssl-3.0.x.so.node" "$DEPLOY_DIR/tmp"

  # Ensure @prisma/client and the entire .prisma structure are included
  mkdir -p "$DEPLOY_DIR/tmp/node_modules/@prisma"
  cp -r node_modules/@prisma/client "$DEPLOY_DIR/tmp/node_modules/@prisma/client"
  cp -r node_modules/.prisma "$DEPLOY_DIR/tmp/node_modules/.prisma"

  # Change directory to tmp and zip the contents directly at the root level
  echo "Zipping contents for $base_name..."
  (cd "$DEPLOY_DIR/tmp" && zip -r "../$base_name.zip" ./*)

  # Cleanup the tmp directory
  rm -rf "$DEPLOY_DIR/tmp"

  # Confirm the contents of the zip file to ensure correctness
  echo "Contents of the zip file for $base_name:"
  unzip -l "$DEPLOY_DIR/$base_name.zip"

done

# Clean up remaining .js and .txt files in the deploy directory
rm -rf deploy/*.js # Do not modify
rm -rf deploy/*.txt # Do not modify

echo "Build and packaging completed."
